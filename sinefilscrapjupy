{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.5 32-bit",
   "metadata": {
    "interpreter": {
     "hash": "d92ef75bfc8b97db1bc81fa7dbd7ec94ee3f29fd21d8b4bddf5603af556de296"
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from time import sleep\n",
    "from random import randint\n",
    "name = ''\n",
    "r = requests.get('https://www.sinefil.com/%s/all/watched'%name)\n",
    "soup = BeautifulSoup(r.content,'lxml')\n",
    "movie_div = soup.find_all('div',attrs={'class':'col-lg-9'})\n",
    "\n",
    "titles = []\n",
    "durations = []\n",
    "releaseDates = []\n",
    "imdbScores = []\n",
    "genres = []\n",
    "#descriptions = []\n",
    "\n",
    "pages = int(soup.find('div',attrs={'class':'pagination right'}).text[10:12])\n",
    "\n",
    "for page in range(2,pages+1):\n",
    "\n",
    "    for i,container in enumerate(movie_div) :\n",
    "    #title\n",
    "        title = container.h3.a.text\n",
    "        titles.append(title)\n",
    "\n",
    "    #releaseDate\n",
    "        releaseDate = container.h3.span.text[2:-1]\n",
    "        releaseDates.append(releaseDate)\n",
    "\n",
    "    #duration    \n",
    "        durationTable = container.table.find_all('td',class_='text-right')\n",
    "        if len(durationTable)==0:\n",
    "            durations.append('-')\n",
    "        else:\n",
    "            for duration in durationTable:\n",
    "                if len(durationTable)>1:\n",
    "                    durations.append(durationTable[1].text)\n",
    "                    break\n",
    "                else:\n",
    "                    durations.append(duration.text)\n",
    "\n",
    "    #description\n",
    "         #if container.p is not None:\n",
    "           # descriptions.append(container.p.text)\n",
    "       # else:\n",
    "       #     descriptions.append('-')\"\"\"\n",
    "\n",
    "    #genres\n",
    "        genreTable = container.table.find_all('a')\n",
    "        if len(genreTable)==0:\n",
    "            genres.append('-')\n",
    "        else:\n",
    "            for i, _ in enumerate(genreTable):\n",
    "                if len(genreTable)==1:\n",
    "                    genres.append(genreTable[i].text)\n",
    "                elif len(genreTable)==2:\n",
    "                    genres.append(genreTable[i].text+','+genreTable[i+1].text)\n",
    "                    break\n",
    "                else:\n",
    "                    genres.append(genreTable[i].text+','+genreTable[i+1].text+','+genreTable[i+2].text)\n",
    "                    break\n",
    "\n",
    "    #imdbScore\n",
    "        scoresTable = container.find_all('span',attrs={'class':'count'})\n",
    "        \n",
    "        if len(scoresTable)==0:\n",
    "            imdbScores.append('-')\n",
    "        else:\n",
    "            for _ in scoresTable:\n",
    "                if len(scoresTable)>1:\n",
    "                    imdbScores.append(scoresTable[1].text) \n",
    "                    break\n",
    "                else:\n",
    "                    imdbScores.append(scoresTable[0].text)\n",
    "    print('Page %d is done'%page)\n",
    "    sleep(randint(2,10))\n",
    "    r = requests.get('https://www.sinefil.com/%s/all/watched/%d'%(name,page))\n",
    "    soup = BeautifulSoup(r.content,'lxml')\n",
    "    movie_div = soup.find_all('div',attrs={'class':'col-lg-9'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "myMovies = pd.DataFrame({\n",
    "'title':titles,\n",
    "'duration':durations,\n",
    "'releaseDate':releaseDates,\n",
    "'IMDB':imdbScores,\n",
    "'genre':genres})\n",
    "\n",
    "hours = myMovies['duration'].str.extract('( .*(?= Saat))')\n",
    "minutes = myMovies['duration'].str.extract('( .*(?= Dk.))')\n",
    "hours = [hours[0][i].strip() if type(hours[0][i]) != float else hours[0][i] for i in range(len(hours[0]))]\n",
    "minutes = [minutes[0][i][-2:].strip() if type(minutes[0][i]) != float else minutes[0][i] for i in range(len(minutes[0]))]\n",
    "minutes = ['0'+str(i) if len(str(i))==1 else str(i) for i in minutes]\n",
    "myMovies['duration'] = [str(hours[i])+':'+str(minutes[i]) if type(hours[i]) != float else minutes[i] for i in range(len(hours)) ]\n",
    "myMovies.head(5)\n",
    "myMovies.to_excel('movies.xls')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "myMovies.head(5)"
   ]
  }
 ]
}